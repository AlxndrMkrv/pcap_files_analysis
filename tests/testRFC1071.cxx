#include "Checksum/RFC1071.hxx"

bool testIPv4Headers()
{
    {
        static constexpr uint8_t IPv4Header[]{
            0x45, 0x00, 0x00, 0x34, 0x5d, 0x0c, 0x40, 0x00, 0x35, 0x06,
            0x0c, 0x73, 0x5f, 0xd5, 0xb5, 0xa6, 0xc0, 0xa8, 0x06, 0x21};

        Checksum::RFC1071 rfc;
        rfc += BytesSpan{IPv4Header, sizeof(IPv4Header)};
        const uint16_t little = rfc.little();
        const uint16_t big = rfc.big();

        if (!rfc.isOk() || little != 0xFFFF || big != 0xFFFF)
            return false;
    }

    {
        static constexpr uint8_t IPv4Header[]{
            0x46, 0xc0, 0x00, 0x28, 0x00, 0x00, 0x40, 0x00,
            0x01, 0x02, 0x3c, 0x85, 0xc0, 0xa8, 0x06, 0xcc,
            0xe0, 0x00, 0x00, 0x16, 0x94, 0x04, 0x00, 0x00};

        if (!Checksum::RFC1071{BytesSpan{IPv4Header, sizeof(IPv4Header)}}
                 .isOk())
            return false;
    }

    return true;
}

bool testTCP4Headers()
{
    {
        static constexpr uint8_t PseudoHeaderTCP4[]{
            0xc0, 0xa8, 0x06, 0x21, 0x5f, 0xd5, 0xb5, 0xa6, 0x00, 0x06, 0x00,
            0x28, 0xe0, 0x06, 0x1f, 0x91, 0x76, 0xdc, 0x37, 0x19, 0x00, 0x00,
            0x00, 0x00, 0xa0, 0x02, 0x72, 0x10, 0x61, 0x93, 0x00, 0x00, 0x02,
            0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a, 0xff, 0xfe, 0xea, 0x8a,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07};

        Checksum::RFC1071 rfc;
        rfc += BytesSpan{PseudoHeaderTCP4, sizeof(PseudoHeaderTCP4)};
        const uint16_t little = rfc.little();
        const uint16_t big = rfc.big();

        if (!rfc.isOk() || little != 0xFFFF || big != 0xFFFF)
            return false;
    }

    return true;
}

bool testUDP4Headers()
{
    {
        // Even size
        static constexpr uint8_t UDP4Header[]{
            0xc0, 0xa8, 0x06, 0x21, 0x08, 0x08, 0x08, 0x08, 0x00, 0x11, 0x00,
            0x32, 0xc9, 0x9c, 0x00, 0x35, 0x00, 0x32, 0x7d, 0x6f, 0x38, 0x25,
            0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x72, 0x75, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x08, 0x6b,
            0x65, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x05, 0x63, 0x6c, 0x6f,
            0x75, 0x64, 0x00, 0x00, 0x01, 0x00, 0x01};

        Checksum::RFC1071 rfc;
        rfc += BytesSpan{UDP4Header, sizeof(UDP4Header)};
        const uint16_t little = rfc.little();
        const uint16_t big = rfc.big();

        if (!rfc.isOk() || little != 0xFFFF || big != 0xFFFF)
            return false;
    }
    {
        // Odd size
        static constexpr uint8_t UDP4Header[]{
            0xc0, 0xa8, 0x06, 0x21, 0x08, 0x08, 0x08, 0x08, 0x00, 0x11, 0x00,
            0x29, 0xca, 0x5e, 0x00, 0x35, 0x00, 0x29, 0xe9, 0xe6, 0x14, 0x2a,
            0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
            0x64, 0x6e, 0x73, 0x2d, 0x73, 0x06, 0x73, 0x6b, 0x79, 0x64, 0x6e,
            0x73, 0x02, 0x72, 0x75, 0x00, 0x00, 0x01, 0x00, 0x01};

        Checksum::RFC1071 rfc;
        rfc += BytesSpan{UDP4Header, sizeof(UDP4Header)};
        const uint16_t little = rfc.little();
        const uint16_t big = rfc.big();

        if (!rfc.isOk() || little != 0xFFFF || big != 0xFFFF)
            return false;
    }

    return true;
}

bool testICMP4Headers()
{
    {
        static constexpr uint8_t ICMP4Header[]{
            0x03, 0x01, 0xd2, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00,
            0x00, 0x3c, 0x0a, 0xac, 0x40, 0x00, 0x40, 0x06, 0xa3, 0xf2,
            0xc0, 0xa8, 0x05, 0xcc, 0xc0, 0xa8, 0x05, 0x01, 0xc1, 0x3e,
            0x00, 0x50, 0x99, 0x23, 0x77, 0xad, 0x00, 0x00, 0x00, 0x00,
            0xa0, 0x02, 0xfa, 0xf0, 0x8c, 0x4c, 0x00, 0x00, 0x02, 0x04,
            0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a, 0xe4, 0x66, 0x35, 0x0d,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07};

        Checksum::RFC1071 rfc;
        rfc += BytesSpan{ICMP4Header, sizeof(ICMP4Header)};
        const uint16_t little = rfc.little();
        const uint16_t big = rfc.big();

        if (!rfc.isOk() || little != 0xFFFF || big != 0xFFFF)
            return false;
    }

    return true;
}

bool testICMP6Headers()
{
    {
        static constexpr uint8_t PseudoHeaderICMP6[]{
            0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa,
            0xaa, 0xff, 0xfe, 0xaa, 0xaa, 0x02, 0xff, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3a,
            0x85, 0x00, 0x26, 0xe0, 0x00, 0x00, 0x00, 0x00};

        Checksum::RFC1071 rfc;
        rfc += BytesSpan{PseudoHeaderICMP6, sizeof(PseudoHeaderICMP6)};
        const uint16_t little = rfc.little();
        const uint16_t big = rfc.big();

        if (!rfc.isOk() || little != 0xFFFF || big != 0xFFFF)
            return false;
    }

    return true;
}

bool testUDP6Headers() { return true; }

int main()
{
    if (!testIPv4Headers())
        return 1;

    if (!testTCP4Headers())
        return 1;

    if (!testUDP4Headers())
        return 1;

    if (!testICMP4Headers())
        return 1;

    if (!testUDP6Headers())
        return 1;

    if (!testICMP6Headers())
        return 1;

    return 0;
}
