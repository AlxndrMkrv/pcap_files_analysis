#include "Packet/ICMP.hxx"
#include "Packet/IPv4.hxx"
#include "Packet/IPv6.hxx"

namespace {
bool FromIPv6()
{
    {
        static constexpr uint8_t Dump[]{
            0x60, 0x0a, 0xbf, 0x28, 0x00, 0x10, 0x3a, 0xff, 0xfe, 0x80,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x9a, 0x20, 0xff,
            0xfe, 0x37, 0xe9, 0xac, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x85, 0x00, 0x96, 0x31, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
            0x6a, 0x9a, 0x20, 0x37, 0xe9, 0xac};

        const IPv6::Packet ipv6{
            BytesSpan{static_cast<BytesSpan::CByte *>(Dump), sizeof(Dump)}};
        const IPv6::PseudoHeader pseudo = ipv6.pseudoHeader();
        const BytesSpan pseudo_span{reinterpret_cast<const uint8_t *>(&pseudo),
                                    sizeof(IPv6::PseudoHeader)};

        // refer to IPv6 tests if something goes wrong here
        if (!ipv6.isSane() || !ipv6.isChecksumOk() ||
            ipv6.nextHeader() != IPv4::Protocol::ICMP6)
            return false;

        const ICMP::Packet icmp{ipv6.payload(), ipv6.pseudoHeader()};

        if (!icmp.isSane())
            return false;

        if (!icmp.isChecksumOk())
            return false;
    }

    return true;
}

bool FromIPv4()
{
    {
        static constexpr uint8_t Dump[]{
            0x45, 0xc0, 0x00, 0x74, 0x7a, 0x24, 0x00, 0x00, 0x40, 0x01, 0x7e,
            0x45, 0xc0, 0xa8, 0x00, 0x01, 0xc0, 0xa8, 0x00, 0x0e, 0x03, 0x03,
            0x7e, 0xb2, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x58, 0xb1,
            0xd7, 0x40, 0x00, 0x40, 0x11, 0x07, 0x5e, 0xc0, 0xa8, 0x00, 0x0e,
            0xc0, 0xa8, 0x00, 0x01, 0x8c, 0xdf, 0x14, 0xe7, 0x00, 0x44, 0xf5,
            0xda, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0,
            0xa8, 0x00, 0x0e, 0x14, 0xc9, 0x31, 0x27, 0xb7, 0xd8, 0xff, 0x01,
            0xd7, 0xcc, 0x65, 0xa0, 0x06, 0x00, 0x00, 0x00, 0x6a, 0xb2, 0x6a,
            0xb2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00};

        const IPv4::Packet ipv4{
            BytesSpan{static_cast<BytesSpan::CByte *>(Dump), sizeof(Dump)}};

        if (!ipv4.isSane() || !ipv4.isChecksumOk() ||
            ipv4.protocol() != IPv4::Protocol::ICMP)
            return false;

        const ICMP::Packet icmp{ipv4.payload()};

        if (!icmp.isSane())
            return false;

        if (!icmp.isChecksumOk())
            return false;
    }

    return true;
}
} // namespace

int main()
{
    if (!FromIPv6())
        return 1;

    if (!FromIPv4())
        return 1;

    return 0;
}
