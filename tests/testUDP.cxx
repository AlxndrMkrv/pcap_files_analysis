#include "Checksum/RFC1071.hxx"
#include "Packet/UDP.hxx"

bool FromIPv4()
{
    {
        static constexpr uint8_t Dump[]{
            0x45, 0x00, 0x00, 0x46, 0xaf, 0x3a, 0x40, 0x00, 0x40, 0x11,
            0xb4, 0x93, 0xc0, 0xa8, 0x06, 0x21, 0x08, 0x08, 0x08, 0x08,
            0xc9, 0x9c, 0x00, 0x35, 0x00, 0x32, 0x7d, 0x6f, 0x38, 0x25,
            0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x72, 0x75, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
            0x08, 0x6b, 0x65, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x05,
            0x63, 0x6c, 0x6f, 0x75, 0x64, 0x00, 0x00, 0x01, 0x00, 0x01};

        const IPv4::Packet ipv4{
            BytesSpan{static_cast<const uint8_t *>(Dump), sizeof(Dump)}};

        // refer to IPv4 tests if something fails here
        if (!ipv4.isSane() || !ipv4.isChecksumOk() ||
            ipv4.protocol() != IPv4::Protocol::UDP)
            return false;

        const UDP::Packet udp{ipv4.payload(), ipv4.pseudoHeader()};

        if (!udp.isSane())
            return false;

        if (!udp.isChecksumOk())
            return false;

        if (udp.source() != 51612)
            return false;

        if (udp.destination() != 53)
            return false;

        if (udp.length() != 50)
            return false;
    }
    {
        static constexpr uint8_t Dump[]{
            0x45, 0x00, 0x00, 0x3d, 0xaf, 0x3e, 0x40, 0x00, 0x40, 0x11, 0xb4,
            0x98, 0xc0, 0xa8, 0x06, 0x21, 0x08, 0x08, 0x08, 0x08, 0xca, 0x5e,
            0x00, 0x35, 0x00, 0x29, 0xe9, 0xe6, 0x14, 0x2a, 0x01, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x64, 0x6e, 0x73,
            0x2d, 0x73, 0x06, 0x73, 0x6b, 0x79, 0x64, 0x6e, 0x73, 0x02, 0x72,
            0x75, 0x00, 0x00, 0x01, 0x00, 0x01};

        const IPv4::Packet ipv4{
            BytesSpan{static_cast<BytesSpan::CByte *>(Dump), sizeof(Dump)}};

        // refer to IPv4 tests if something fails here
        if (!ipv4.isSane() || !ipv4.isChecksumOk() ||
            ipv4.protocol() != IPv4::Protocol::UDP)
            return false;

        const UDP::Packet udp{ipv4.payload(), ipv4.pseudoHeader()};

        if (!udp.isSane())
            return false;

        if (!udp.isChecksumOk())
            return false;

        if (udp.source() != 51806)
            return false;

        if (udp.destination() != 53)
            return false;

        if (udp.length() != 41)
            return false;
    }

    return true;
}

bool FromIPv6()
{
    {
        static constexpr uint8_t Dump[]{
            0x60, 0x01, 0xc1, 0x97, 0x00, 0x5c, 0x11, 0x01, 0xfe, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0xaa, 0xff, 0xfe, 0xaa,
            0xaa, 0x02, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x22, 0x02, 0x23,
            0x00, 0x5c, 0x3e, 0x7c, 0x01, 0xb8, 0x0e, 0x78, 0x00, 0x08, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x18, 0x00, 0x15, 0x00, 0x16,
            0x00, 0x17, 0x00, 0x18, 0x00, 0x1f, 0x00, 0x38, 0x00, 0x40, 0x00,
            0x43, 0x00, 0x5e, 0x00, 0x5f, 0x00, 0x60, 0x00, 0x52, 0x00, 0x01,
            0x00, 0x0a, 0x00, 0x03, 0x00, 0x01, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
            0x02, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0c, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

        const IPv6::Packet ipv6{
            BytesSpan{static_cast<const uint8_t *>(Dump), sizeof(Dump)}};

        // refer to IPv6 tests if something fails here
        if (!ipv6.isSane() || !ipv6.isChecksumOk() ||
            ipv6.nextHeader() != IPv4::Protocol::UDP)
            return false;

        const UDP::Packet udp{ipv6.payload(), ipv6.pseudoHeader()};

        if (!udp.isSane())
            return false;

        if (!udp.isChecksumOk())
            return false;

        if (udp.source() != 546)
            return false;

        if (udp.destination() != 547)
            return false;

        if (udp.length() != 92)
            return false;
    }

    return true;
}

int main()
{
    if (!FromIPv4())
        return 1;

    if (!FromIPv6())
        return 1;

    return 0;
}
